m=mirror
s=synchronization
n=unsynchronized
c=change tracking
r=resynchronization
u=up
d=down
add=add
delete=delete
modify=modify
total=total {0}
title=GP Manage Tool
download=download
upload=upload
message=message
userName=user name
password=password
validate=validate
exchange=exchange
selectAll=select all
set=set
cancel=cancel
ok=ok
port=port
ip=ip
hostname=host name
db_id=database id
role=role
dir=directory name
instance_dir=instance directory
init=init
rollback=rollback
validateing= validateing...
reset_defualt_value=restore default value

title.install=   install   
title.manage=   manage   
title.monitor=   monitor   
query=query
table_name=table name
refresh = refresh
hostMange.title=host manage
hostMange.desc=host manage is mainly to manage all node servers (including user name, machine display name, internal IP, external IP, etc.) information, including user name, machine display name, IP, etc.)

hostMange.table.hostName=host name
hostMange.table.hostIp=ip
hostMange.table.userName= super user name
hostMange.msg.addHost=add host {0} success!\r\n
hostMange.msg.modifyHost=modify  host {0} success!\r\n
hostMange.msg.delHost=delete host {0} success!\r\n

hostConfigure.title=host configure
hostConfigure.desc=host configuration refers to the setup of the node server system before the GPDB installation
hostConfigure.parameter.configuration =host parameter configuration
hostConfigure.close.services=close services
hostConfigure.close.selinux=close selinux
hostConfigure.close.firewall=close firewall
hostConfigure.modify.hostsFile=modify hosts file
hostConfigure.modify.hostName=modify host name
hostConfigure.modify.sysctl=modify sysctl.conf
hostConfigure.select.hosts=select hosts
hostConfigure.modify.limits=modify limits.conf
hostConfigure.modify.blockdev=blockdev
hostConfigure.modify.nproc=limit for number of user's processes
hostConfigure.fail.modifyHostName=host name "{0}" not conform to specification
hostConfigure.fail.HostName=exit host name {0}

install.title=master install gpdb
install.desc=Install the database is install GPDB software on the master node servers
install.create.superuser=create super user 
install.create.path=create the installation directory
install.run=run install
install.select.master=select master host

ssh.title=SSH key exchange
ssh.desc=Exchange SSH keys, including:\r\n 1. select node server\r\n 2. validation of the selected node server key exchange\r\n 3. SSH key exchange between selected server nodes and master node
ssh.set.timeout=set timeout(second)
ssh.host.name=node server name
ssh.node.isMaster=is master node
ssh.isExchange=is exchange

install.segment.title=segment install gpdb
install.segment.desc=Install the database is install GPDB software on the segment node servers
install.segment.isInstall=is install
check.title=system check
check.desc=The system check includes:\r\n 1. check the system parameters for the node server\r\n 2. system hard disk check for node server\r\n 3. system network check on node server
check.system.desc=check Node server's system configuration
check.hardware.desc= check node server's hardware device
check.system.anction=check system configuration
check.hardware.anction=check hardware device

initfile.title=configure initialization file
initfile.desc=configure the database instance installation's initialization file
initfile.db.user=create db's name
initfile.db.name =db name
initfile.config.title=configure Gpinitsystem_config file
initfile.port.master=MASTER_PORT
initfile.name.master=MASTER_HOSTNAME
initfile.path.master=MASTER_DIRECTORY
initfile.path.primary=DATA_DIRECTORY
initfile.numb.primary=NUMBER_PRIMARY
initfile.path.mirror=MIRROR_DATA_DIRECTORY
initfile.database.name = database name
initfile.path.data=DATA DIRECTORY
initfile.database.tip=if this value is null,then the gp only have database named 'postgres' 'template0' 'template1' 
envVariable.title=setting environment variable
envVariable.desc=1.setting master node's environment variable\r\n2.setting segment node's environment variable
envVariable.master.param=setting master node's environment variable
envVariable.segment.param=setting segment node's environment variable
hostConfigure.success.closedSeLunux={0} close SeLunux succes!
hostConfigure.fail.closedSeLunux={0} close SeLunux fail! --- {1}
soft.title=denpendency soft
soft.desc=check the system software required to install the database
soft.hostlist=select host
soft.name=soft name
soft.need.version= required version
soft.install.version=install version
soft.check.result=result
soft.result.uninstall=not installed
soft.result.upgrade=upgrade
soft.result.unknow=unknow
soft.result.ok=ok
gp_Name=name
master_host_name=master host name
master_host_ip=master host ip
master_root_pwd=master root password
master_root_name=master root name
gp_port=gp port
gp_user_name=gp user name
gp_user_pwd=gp user password
gp_install_path=gp install path
err_hostname_null=host name is null
err_ip_null=ip is null
err_username_null=user name is null
err_password_null=password is null
err_host_exist=the host already exist
err_host=configure error or Check is install LSB_RELEASE


instance.install.title=install instance
instance.install.desc=1.display installation list\n2.monitoring installation process,prompt error information
mirror.numb.error=[ERROR:] the number of mirror is incorrect!
rank.level.error=[ERROR:] the value of rank is incorrect!

path.install.error=GP install path is null!
path.datadir.error=GP data dir is null!
gp.root.error=ip or root user is incorrect or checkout is install LSB_RELEASE!
gp.gpuser.error=ip or gp user is incorrect!
standby.master.error=master  can not as standby!
host.isStandby.error=host is not standby!
error=[ERROR:]{0}
info=[INFO:]{0}
server.root.node=server
server.hostManage.node=host manage
server.configure.node=host configure
server.soft.node=denpendency soft
server.denpendencysoft.node=denpendency soft

install.root.node=gpdb install
install.master.node=master install gpdb
install.ssh.node=exchange SSH key 
install.check.node=system detection
install.segment.node=segmengt node install gpdb

instance.root.node=install instance
instance.initFile.node=configure the initialization file
instance.runInstall.node=run install
instance.variable.node=environment variable

hostConfigure.success.closedSeLunux=[INFO:]{0} close SeLunux succes!
hostConfigure.fail.closedSeLunux=[ERROR:]{0} close SeLunux fail!\n{1}
hostConfigure.success.closeIptables=[INFO:]{0} close iptable succes!
hostConfigure.fail.closeIptables=[ERROR:]{0} close iptable fail\n{1}
hostConfigure.success.hostName =[INFO:]{0} modify hostName success!
hostConfigure.fail.hostName=[ERROR:]{0} modify hostName fail!\n{1}
hostConfigure.success.hosts =[INFO:]{0} modify hosts file success!
hostConfigure.fail.hosts={0} modify hosts file fail! --- {1}
hostConfigure.success.sysctl =[INFO:]{0} modify sysctl.conf file success!
hostConfigure.fail.sysctl=[ERROR:]{0} modify sysctl.conf file fail!\n{1}
hostConfigure.success.limit =[INFO:]{0} modify limits.conf file success!
hostConfigure.fail.limit=[ERROR:]{0} modify limits.conf  file fail!\n{1}
hostConfigure.success.install =[INFO:]{0} install success!
hostConfigure.fail.install=[ERROR:]{0} modify install fail!\n{1}
hostConfigure.create.install = {0} install success!
hostConfigure.fail.install=[ERROR:]{0} modify install fail!\n{1}
hostConfigure.fail.blockdev=[ERROR:]{0} modify bolckdev fail!\n{1}
hostConfigure.success.blockdev=[INFO:]{0} modify bolckdev success!
hostConfigure.fail.nproc=[ERROR:]{0} modify nproc fail!\n{1}
hostConfigure.success.nproc=[INFO:]{0} modify nproc success!

install.create.installpath={0} create install path {1}...
install.success.installpath=[INFO:]{0} create install path  {1} success!
install.create.confpath={0} create configure path {1}...
install.success.confpath=[INFO:]{0} create configure path {1} success!
install.create.user={0} create db user {1}...
install.success.user=[INFO:]{0} create db user {1} success!
install.fail.user=[ERROR:]{0} create db user {1} fail!\n{2}
install.success.gpdb=[INFO:]{0} send gpdb success!
install.fail.gpdb=[ERROR:]{0} send gpdb fail!\n{1}
install.process=master install gpdb...
install.install.segment=segment install gpdb...
install.success=[INFO:]{0} install gpdb success!
install.fail={0} install gpdb fail!\n{1}
install.success.env=[INFO:]setting  environment variable success!
install.fail.env=[ERROR:]setting  environment variable fail!\n{0}
install.success.segment=[INFO:]segment install gpdb success!
install.fail.segment=[ERROR:]segment install gpdb fail!\n{0}
install.create.dataDir=create data dir......
install.success.dataDir=[INFO:]create data dir success!
install.begin.instance=init db......
install.success.instance=[INFO:]init db success!
install.fail.instance=[ERROR:]init db fail!
install.fail.checkenv=[ERROR:]check system fail!{0}
install.success.checkenv=\n[INFO:]check system success!
install.fail.checkhardware=[ERROR:]check hardware fail!{0}
install.success.checkhardware=\n[INFO:]check hardware success!
ssh.verification.host={0} verification completed !  --- {1}
ssh.process.exchangKey=exchange SSH key......
ssh.success.exchangKey=[INFO:]exchange SSH key success!
ssh.fail.exchangKey=[ERROR:]exchange SSH key fail!\n{0}
install.success.installDir=[INFO:]create install dir success!
install.fail.installDir=[ERROR:]create install dir fail!\n{0}

initFile.process.create= create initFile......
initFile.success.create=[INFO:]create initFile success!
initFile.process.configure=[INFO:]configure init file......
initFile.success.configure=[INFO:]configure init file success!
initFile.fail.configure=[ERROR:]configure init file fail!\n{0}
initFile.add.mirror=add mirror
initFile.mirror.type=mirror type
initFile.port.error=[ERROR:]master port error!\\n
initFile.masterdir.error=[ERROR:]master data dir error!\n
initFile.segdir.error=[ERROR:]segment data dir error!\\n
initFile.mirrordir.error=[ERROR:]mirror data dir error!\n
initFile.segNum.error=[ERROR:]primary number error!\n
initFile.portBase.error=[ERROR:]MIRROR_PORT_BASE error!\n
initFile.rPortBase.error=[ERROR:]REPLICATION_PORT_BASE error!\n
initFile.mrPortBase.error=[ERROR:]MIRROR_REPLICATION_PORT_BASE error!\n

instance.success.createdir=[INFO:]create gp data dir success!
instance.fail.createdir=[ERROR:]create gp data dir fail!\n{0}
instance.fail.install=[ERROR:]init gp fail!\n{0}
instance.success.install=[INFO:]init gp success!

soft.fail.check=[ERROR:]{0} check soft fail!\n{1}
soft.success.check=[INFO:]{0} check soft success!

installMaster.host.error=[ERROR:]please select master host\n
installMaster.segment.error=[ERROR:]segment host is null\n
installMaster.username.error=[ERROR:]database user name is null\n
installMaster.userpwd.error=[ERROR:]database user password is null\n
installMaster.installPath.error=[ERROR:]please input install path\n
ssh.previous.error=[ERROR:]please run "master install gpdb" first\n
installSegment.previous.error=[ERROR:]please run "exchange SSH key" first\n
initfile.previous.error=[ERROR:]please run "segmengt node install gpdb" first\n
instance.previous.error=[ERROR:]please run "configure the initialization file" first\n
installmaster.previous.error=[ERROR:]please run "server.configure.node->modify hosts file" first\n